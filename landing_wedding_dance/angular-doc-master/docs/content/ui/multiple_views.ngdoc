@ngdoc overview
@name UI-Router: Множественные виды
@description

Чтобы иметь более одного `ui-view` на состояние, можно задавать видам имена. Скажем, приложение имеет состояние, 
в котором показываются динамически наполняемые график, таблица с данными и фильтры для таблицы. Примерно как здесь:

![Multiple Named Views Mockup](https://raw.github.com/wiki/angular-ui/ui-router/MultipleNamedViewsExample.png)

При задании нескольких видов необходимо использовать параметр `views` в определении состояния. `views` это объект.

### Виды переопределяют параметры шаблонов состояния
Если определить объект `views`, то `templateUrl`, `template` и `templateProvider` в соответствующем состоянии будут
проигнорированы. Так что, в случае родительского размещения этих видов, можно определить абстрактное состояние,
содержащее шаблон и дочернее состояние под размещенным состоянем, содержащим объект «views».

### Пример - согласование имен

Ключи `views` должны соответствовать именам видов, как здесь:
<pre>
<!-- somereportthing.html -->
<body>
  <div ui-view="filters"></div>
  <div ui-view="tabledata"></div>
  <div ui-view="graph"></div>
</body>
</pre>
<pre>
$stateProvider
  .state('report', {
    views: {
      'filters': { ... templates, controllers, resolve, etc ... },
      'tabledata': {},
      'graph': {},
    }
  })
</pre>
Затем для каждого вида из `views` можно определить собственный шаблон, контроллер и принимаемые данных.
<pre>
$stateProvider
  .state('report',{
    views: {
      'filters': {
        templateUrl: 'report-filters.html',
        controller: function($scope){ ... контроллер для вида с фильтрами ... }
      },
      'tabledata': {
        templateUrl: 'report-table.html',
        controller: function($scope){ ... контроллер для вида с таблицей ... }
      },
      'graph': {
        templateUrl: 'report-graph.html',
        controller: function($scope){ ... контроллер для вида с графиком ... }
      },
    }
  })
</pre>

### Имена видов. Относительные или абсолютные
Каждому виду можно назначить абсолютное имя, соответствующее схеме viewname@statename, где viewname это имя,
используемое в директиве вида и statename это абсолютное имя состояния, например, contact.item.

Например, предыдущий пример можно записать так:
<pre>
  .state('report',{
    views: {
      'filters@': { },
      'tabledata@': { },
      'graph@': { }
    }
  })
</pre>

Обратите внимание, что имя видо теперь указано как абсолютное, в отличие от относительного имени. Оно нацелено 
на виды  «filters», «tabledata» и «graph» расположеные в корневом безымянном шаблоне. Т. к. он безымянный,
почле «@» ничего не следует. Корневой безымянный шаблон это index.html. Абсолютные имена позволяют производить
достаточно мощное позиционирование видов. Помните! С мощностью увеличивается ответственность.
Предположим, что у нас было задано несколько вложенных видов, как здесь (Пример не реалистичный, он нужен 
только для иллюстрации позиционирования видов):
<pre>
<!-- index.html (корневой безымянный шаблон) -->
<body ng-app>
<div ui-view></div> <!-- Поместите contacts.html сюда -->
<div ui-view="status"></div>
</body>
</pre>

<pre>
<!-- contacts.html -->
<h1>My Contacts</h1>
<div ui-view></div>
<div ui-view="detail"></div>
</pre>

<pre>
<!-- contacts.detail.html -->
<h1>Contacts Details</h1>
<div ui-view></div>
<div ui-view="info"></div>
</pre>
Давайте посмотрим на различные виды, для которых можно настроить позиционирование изнутри состояния contacts.detail. 
Помните, что если используется `@` то путь вида считается абсолютным:
<pre>
$stateProvider
  .state('contacts', {
    // Будет автоматически вложен в безымянный ui-view 
    // родительского шаблона. Начиная с состояния верхнего уровня, 
    // шаблоном этого родительского состояния является index.html.
    templateUrl: 'contacts.html'   
  })
  .state('contacts.detail', {
    views: {
        /////////////////////////////////////////////////////
        // Относительное позиционирование                  //
        // позиционируется родительское состояние в ui-view//
        /////////////////////////////////////////////////////

        // Относительное позиционирование вида 'detail' в родительском
        // состоянии 'contacts'.
        // <div ui-view='detail'/> внутри contacts.html
        "detail" : { },            

        // Относительное поциционирование безымянного вида в родительском
        // состояния 'contacts'.
        // <div ui-view/> внутри contacts.html
        "" : { }, 

        ////////////////////////////////////////////////////////////////////////////
        // Абсолютное позиционирование '@'                                        //
        // Позиционирование любых видов внутри этого состояния илипредшествующего //
        ////////////////////////////////////////////////////////////////////////////

        // Абсолютное позиционирование вида 'info' в состоянии 'contacts.detail'.
        // <div ui-view='info'/> внутри contacts.detail.html
        "info@contacts.detail" : { }

        // Абсолютное позиционирование вида 'detail' в состоянии 'contacts'.
        // <div ui-view='detail'/> внутри contacts.html
        "detail@contacts" : { }

        // Абсолютное позиционирование безымянного вида в родительском
        // состоянии 'contacts'.
        // <div ui-view/> внутри contacts.html
        "@contacts" : { }

        // Абсолютное позиционирование вида 'status' в корневом безымянном состоянии.
        // <div ui-view='status'/> внутри index.html
        "status@" : { }

        // Абсолютное позиционирование безымянного вида в корневом безымянном состоянии.
        // <div ui-view/> внутри index.html
        "@" : { } 
  });
</pre>

Можно увидеть, что это возможность не только установить несколько видов в рамках одного состояния, но родительского
состояния, что могло бы стать настоящей площадкой для разработчиков :).
