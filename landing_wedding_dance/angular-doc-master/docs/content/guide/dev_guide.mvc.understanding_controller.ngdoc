@ngdoc overview
@name Developer Guide: MVC в Angular: Контроллер
@description

В Angular контроллер является функцией JavaScript (типа/класса), использующейся для расширения экземпляров
{@link scope областей видимости}, за исключением корневой области. Когда вы или Angular создает новую
дочернюю область видимости через {@link api/ng.$rootScope.Scope#$new scope.$new}, то можно передать свойства 
в контроллер в качестве аргумента метода. Это скажет Angular'у связать
контроллер с новой областью и расширить ее поведение.

Используйте контроллеры для:

- Установки начального состояния объекта области видимости.
- Добавления поведения в объект области.

# Установка начального состояния объекта области видимости

Как правило, при создании приложения, нужно определить его начальное состояние для области видимости.

Angular применяет (в отношении JavaScript-функции `apply`) конструктор контроллера для нового объекта 
области видимости, который устанавливает начальное состояние области. Это означает, что Angular никогда
не создает экземпляры типа контроллера (путем вызова оператора `new` в конструкторе контроллера). 
Конструкторы всегда применяются к существующему объекту области.

Установим начальное состояние области видимости путем создания свойства модели. Например:

function GreetingCtrl($scope) {
 $scope.greeting = 'Hola!';
}

Контроллер `GreetingCtrl` создает модель приветствия `greeting` которая может быть связана с шаблоном.

**Замечание**: Во многих примерах в документации показано создание функций
в глобальной области видимости, что сделано лишь в демонстрационных целях — в реальном
приложений необходимо использовать метод `.controller` модуля приложения следующим образом:

var myApp = angular.module('myApp',[]);

myApp.controller('GreetingCtrl', ['$scope', function($scope) {
  $scope.greeting = 'Hola!';
}]);

Отметим также, что мы используем запись в виде массива, чтобы явно указать зависимость
контроллера от сервиса `$scope`, предоставляемого Angular.


# Добавление поведения к объекту области видимости

Поведение в объекте области видимости в виде свойств метода области доступны в
шаблоне/виде. Такое поведение взаимодействует и вносит изменения в модель.

Как уже говорилось в разделе {@link dev_guide.mvc.understanding_model Модель}, любые
объекты (или примитивы), расположенные в области видимости, становятся свойствами модели. Любые функции, расположенные
в области видимости, доступны в шаблоне/виде, и их можно вызывать через angular-выражения и директивы `ng` обработчиков 
событий (например, {@link api/ng.directive:ngClick ngClick}).


# Правильное использование контроллеров

В принципе, контроллер не должен брать на себя слишком многого. Он должен содержать только бизнес-логику,
необходимую для одного представления.

Наиболее распространенный способ не захламлять контроллеры заключается в инкапсуляции работы не характерной 
для контроллеров в сервисы, а затем использования этих сервисов в контроллерах через внедрение зависимости.
Это обсуждается в разделах {@link di Внедрение зависимости} и {@link dev_guide.services Сервисы}.

Не используйте контроллеры для:

- Любых манипуляций с DOM - контроллеры должны содержать только бизнес-логику. Логика DOM-манипуляций хорошо известна 
тем, что ее сложно протестировать. Ввод любой логики представления в контроллеры сильно влияет на тестирование 
бизнес-логики. Angular использует {@link dev_guide.templates.databinding связывание данных} для автоматических 
DOM-манипуляций. Если необходимо изменять DOM вручную, включите логику представления в 
{@link guide/directive директивы}.
- Форматирования ввода - вместо этого используйте {@link forms элементы управления формой}.
- Фильтрации вывода - вместо этого используйте {@link dev_guide.templates.filters фильтры}.
- Для запуска кода с или без сохранения состояния - вместо этого используйте {@link dev_guide.services сервисы}
- Чтобы создать экземпляр или управлять жизненным циклом других компонентов (например, для создания экземпляров сервиса).


# Связь контроллеров с объектами областей видимости

Можно связать контроллеры с объектами областей явно через {@link api/ng.$rootScope.Scope#$new
scope.$new} или неявно через директиву {@link api/ng.directive:ngController ngController} или сервис 
{@link api/ng.$route $route}.


## Пример конструктора и методов контроллера

Чтобы проиллюстрировать, как работает контроллер, давайте создадим небольшое приложение, включающее
следующие компоненты:

- {@link dev_guide.templates Шаблон} с двумя кнопками и простым сообщением
- Модель, состоящую из строки с именем `spice`
- Контроллер с двумя функциями, устанавливающими значение `spice`

Сообщение в нашем шаблоне содержит привязки к модели `spice`, в которой по умолчанию установлена строка «very». 
В зависимости от того, какая кнопка нажата, модель `spice` устанавливается в `chili` или `jalapeño`, и сообщение 
автоматически обновляется с помощью связывания данных.

## Пример Spicy-контроллера

<pre>
<body ng-controller="SpicyCtrl">
 <button ng-click="chiliSpicy()">Chili</button>
 <button ng-click="jalapenoSpicy()">Jalapeño</button>
 <p>The food is {{spice}} spicy!</p>
</body>

function SpicyCtrl($scope) {
 $scope.spice = 'very';
 $scope.chiliSpicy = function() {
   $scope.spice = 'chili';
 }
 $scope.jalapenoSpicy = function() {
  $scope.spice = 'jalapeño';
 }
}


</pre>

На что следует обратить внимание в приведенном выше примере:

- Директива `ngController` используется чтобы (неявно) создать область видимости для нашего шаблона, а так же 
область видимости используемую (управляемую) с помощью контроллера `SpicyCtrl`.
- `SpicyCtrl` это обычная функция на чистом JavaScript, имя которой (опционально) начинается с заглавной и заканчивается 
на "Ctrl" или "Controller".
- Задание свойств `$scope` создает или обновляет модель.
- Методы контроллера могут быть созданы через прямое указание области видимости (метод `chiliSpicy`).
- Методы контроллера доступны в шаблоне (для элемента `body` и его потомков).
- Примечание: В предыдущих версиях Angular (до 1.0 RC) позволялось использовать `this` вперемешку с методом $scope, 
но теперь это не так. Внутри методов, определенных в области видимости, `this` и $scope являются взаимозаменяемыми (Angular устанавливает `this` в $scope), 
но не наоборот.
- Примечание: В предыдущих версиях Angular (до 1.0 RC) прототип методов добавлялся в область видимости автоматически, 
но теперь это не так; все методы должны добавляться в области видимости вручную.

Методы контроллеров могут принимать аргументы, как показано в следующем варианте предыдущего примера.

## Пример аргументов метода контроллера

<pre>
<body ng-controller="SpicyCtrl">
 <input ng-model="customSpice" value="wasabi">
 <button ng-click="spicy('chili')">Chili</button>
 <button ng-click="spicy(customSpice)">Custom spice</button>
 <p>The food is {{spice}} spicy!</p>
</body>

function SpicyCtrl($scope) {
 $scope.spice = 'very';
 $scope.spicy = function(spice) {
   $scope.spice = spice;
 }
}
</pre>

Обратите внимание, что контроллер `SpicyCtrl` теперь определяет только один метод `spicy`, который принимает один
аргумент `spice`. Шаблон ссылается на метод контроллера и передает ему строковую константу `«chili»` связанную 
с первой кнопкой и свойство модели `spice` (связанного с полем ввода) со второй кнопкой.


## Пример наследования контроллера

Наследование контроллера в Angular основано на наследовании {@link api/ng.$rootScope.Scope области видимости}. 
Разберем на примере:

<pre>
<body ng-controller="MainCtrl">
 <p>Good {{timeOfDay}}, {{name}}!</p>
 <div ng-controller="ChildCtrl">
  <p>Good {{timeOfDay}}, {{name}}!</p>
  <p ng-controller="BabyCtrl">Good {{timeOfDay}}, {{name}}!</p>
 </div>
</body>

function MainCtrl($scope) {
 $scope.timeOfDay = 'morning';
 $scope.name = 'Nikki';
}

function ChildCtrl($scope) {
 $scope.name = 'Mattie';
}

function BabyCtrl($scope) {
 $scope.timeOfDay = 'evening';
 $scope.name = 'Gingerbreak Baby';
}
</pre>

Обратите внимание на три вложенные директивы `ngController` в нашем шаблоне. Такая конструкция шаблона приведет 
к тому, что для представления создадутся 4 области видимости:

- корневая область
- область `MainCtrl`, которая содержит модели `timeOfDay` и `name`
- область `ChildCtrl`, которая перекрывает модель `name` из предыдущей области и наследует модель `timeOfDay`
- область `BabyCtrl`, которая перекрывает и модель `timeOfDay`, определенную в `MainCtrl` и модель `name`, 
определенную в `ChildCtrl`

Наследование между контроллерами работает таким же образом, как это происходит с моделями. Таким образом, 
в наших предыдущих примерах все модели можно заменить на методы контроллера, которые возвращают строку значений.

Примечание: Стандартное прототипое наследование между двумя контроллерами не работает, как и следовало ожидать,
потому что, как мы упоминали ранее, контроллеры не создаются непосредственно Angular, а скорее
применяются к объекту области видимости.


## Тестирование контроллеров

Хотя существует много способов протестировать контроллер, один из лучших, показанный ниже,
предполагает внедрение `$rootScope` и `$controller`

Функция контроллера:
<pre>
function myController($scope) {
   $scope.spices = [{"name":"pasilla", "spiciness":"mild"},
                  {"name":"jalapeno", "spiceiness":"hot hot hot!"},
                  {"name":"habanero", "spiceness":"LAVA HOT!!"}];

   $scope.spice = "habanero";
}
</pre>

Тест контроллера:
<pre>
describe('myController function', function() {

  describe('myController', function() {
    var scope;

    beforeEach(inject(function($rootScope, $controller) {
      scope = $rootScope.$new();
      var ctrl = $controller(myController, {$scope: scope});
    }));

    it('should create "spices" model with 3 spices', function() {
      expect(scope.spices.length).toBe(3);
    });

    it('should set the default value of spice', function() {
      expect(scope.spice).toBe('habanero');
    });
  });
});
</pre>


Если необходимо проверить вложенные контроллеры, необходимо воссоздать в тесте ту же иерархию областей видимости 
которая существует в DOM.

<pre>
describe('state', function() {
    var mainScope, childScope, babyScope;

    beforeEach(inject(function($rootScope, $controller) {
        mainScope = $rootScope.$new();
        var mainCtrl = $controller(MainCtrl, {$scope: mainScope});
        childScope = mainScope.$new();
        var childCtrl = $controller(ChildCtrl, {$scope: childScope});
        babyScope = childCtrl.$new();
        var babyCtrl = $controller(BabyCtrl, {$scope: babyScope});
    }));

    it('should have over and selected', function() {
        expect(mainScope.timeOfDay).toBe('morning');
        expect(mainScope.name).toBe('Nikki');
        expect(childScope.timeOfDay).toBe('morning');
        expect(childScope.name).toBe('Mattie');
        expect(babyScope.timeOfDay).toBe('evening');
        expect(babyScope.name).toBe('Gingerbreak Baby');
    });
});
</pre>


## Связанные разделы

* {@link dev_guide.mvc MVC в Angular}
* {@link dev_guide.mvc.understanding_model Модель}
* {@link dev_guide.mvc.understanding_view Вид}


