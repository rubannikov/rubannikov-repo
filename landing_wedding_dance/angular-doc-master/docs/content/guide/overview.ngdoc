@ngdoc overview
@name Руководство разработчика: Обзор
@description


# Что такое Angular?

AngularJS — структурированный фреймворк для динамических web-приложений.
Позволяет использовать HTML в качестве языка шаблонов, а так же расширять HTML-синтаксис,
чтобы код вашего приложения выглядел кратко и лаконично.
Используя Data-binding и Dependency injection (идущие из коробки), вы также уменьшаете количество своего кода.
И все это на браузерном JavaScript и работает с любой серверной технологией.

Angular - это то, чем был бы HTML, будь он предназначен для приложений.
HTML - замечательный декларативный язык для статических документов.
Он не содержит многого для создания приложений, и, как результат, построение в нем веб-приложений сводится
к тому чтобы обмануть браузер, заставив его делать то, что я хочу.

Несоответствия между динамическими приложениями и статическими документами часто решаются следующими способами:

  * **библиотеки** - коллекции функций,
    которые часто используются при создании веб-приложений.
    Вы расширяете свой код и вызываете функции из библиотеки,
    когда необходимо. Например, `jQuery`;
  * **фреймворки** - определенные реализации веб-приложений, где ваш код детализирует логику.
    Фреймворк берет на себя управление и вызывает ваш код в тех случаях, когда ему необходимо
    сделать что-то специфичное для приложения. Примеры: `knockout`, `sproutcore` и т. д.


Angular предлагает другой подход.
Он пытается свести к минимуму несоответствие между документо-центричным HTML и
потребностями приложения путем создания новых HTML-конструкций.
Angular обучает браузер новому синтаксису с помощью конструкций, называемых директивами.
Можно привести следующие примеры:

  * Биндинги данных в виде `{{}}`.
  * Управление структурами DOM для повторяющихся/скрываемых фрагментов DOM.
  * Поддержка форм и проверок форм.
  * Связывание кода с DOM-элементами.
  * Группировка HTML в повторно используемые компоненты.



## Законченное решение

Angular позиционируется как законченное решение в разработке веб-приложений.
Это означает, что он представляет собой не просто часть общей головоломки построения
веб-приложения, а является целым комплексом. Это дает право Angular указывать на то,
как должны строиться CRUD-приложения. Но в то же время он пытается убедиться,
что его мнение по этому поводу - лишь отправная точка, которую Вы можете легко изменить.
Из коробки Angular включает:

  * Всё, что нужно при построении CRUD-приложения - это связка из привязки данных,
    основных директив шаблонов, валидации форм, маршрутизации, deep-linking,
    повторно применяемых компонентов и внедрения зависимостей.
  * Тестирование: модульные (unit) тесты, end-to-end тесты, моки, test harnesses.
  * Начальное приложение со структурой директорий и скриптом тестирования в качестве отправной точки.


## Область применения Angular
Angular упрощает разработку приложений предоставляя разработчику более высокий уровень абстракции.
Как и за любую другую абстракцию, за эту приходится платить гибкостью.
Другими словами, Angular подойдет не для каждого приложения.
Angular предназначен для CRUD-приложений. К счастью, CRUD-приложения составляют как
минимум 90% всех веб-приложений. Но важно понимать, когда Angular будет хорошим выбором,
а когда не очень.

Игры и редакторы интерфейса - яркие примеры очень интенсивных и сложных манипуляций с DOM.
Эти виды приложений отличаются от CRUD-приложений, и, как результат, не подходят для Angular.
В этом случае что-то более близкое к железу, как, например, jQuery, может быть гораздо лучшим вариантом.

# Вводный пример Angular
Ниже представлено типичное CRUD-приложение с формой. Значения из формы проходят проверку
и используются для формирования результата, который приводится к определенной локали.
Вот базовые концепции, с которыми может столкнуться разработчик приложения:

  * привязка модели данных к UI.
  * запись, чтение и проверка пользовательского ввода.
  * расчет новых значений на основе модели.
  * форматирование вывода с учетом региональных установок пользователя.

<example>
  <file name="script.js">
    function InvoiceCntl($scope) {
      $scope.qty = 1;
      $scope.cost = 19.95;
    }
  </file>
  <file name="index.html">
    <div ng-controller="InvoiceCntl">
      <b>Invoice:</b>
      <br>
      <br>
      <table>
       <tr><td>Quantity</td><td>Cost</td></tr>
       <tr>
         <td><input type="number" ng-pattern="/\d+/" step="1" min="0" ng-model="qty" required ></td>
         <td><input type="number" ng-model="cost" required ></td>
       </tr>
      </table>
      <hr>
      <b>Total:</b> {{qty * cost | currency}}
    </div>
  </file>
  <file name="scenario.js">
    it('should show of angular binding', function() {
      expect(binding('qty * cost')).toEqual('$19.95');
      input('qty').enter('2');
      input('cost').enter('5.00');
      expect(binding('qty * cost')).toEqual('$10.00');
    });
  </file>
</example>

Попробуйте живой пример выше, а затем разберем его и опишем что происходит.

Используя `ng-app` директиву внутри `<html>` тега мы указываем
что это Angular приложение. Так же, директива `ng-app` заставит Angular
произвести {@link bootstrap автоматическую инициализацию} приложения.

    <html ng-app>

Загружаем Angular используя тег `<script>`:

    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/?.?.?/angular.min.js"></script>

Используя атрибут `ng-model` внутри тегов `<input>`, Angular автоматически установит
двустороннюю привязку данных, также мы продемонстрировали простую проверку вводимых
данных:

    Quantity: <input type="number" ng-pattern="/\d+/" step="1" min="0" ng-model="qty" required >
    Cost: <input type="number" ng-model="cost" required >

Эти виджеты выглядят довольно просто, но учтите следующие моменты:

  * Когда страница загрузится, Angular привяжет имена виджетов (`qty` и `cost`) к
    переменным с такими же именами. Думайте о этих переменных как о «моделях», одной из составляющих
    шаблона Model-View-Controller.
  * Обратите внимание что HTML виджет {@link api/ng.directive:input input}
    обладает особыми полномочиями. Когда вы вводите недопустимые значения или оставляете
    поля ввода пустыми, они сами указывают на ошибку подсвечиваясь красным цветом.
    Это новое поведение виджетов упрощает создание проверки(validation) значения поля, которая часто используется
    в CRUD приложениях.

И наконец, магические `{{ двойные фигурные скобки }}`:

         Total: {{qty * cost | currency}}

Такая запись, `{{ _выражение_ }}`, является Angular разметкой для привязки данных(data-binding).
Выражение само по себе может быть комбинацией выражения и {@link dev_guide.templates.filters фильтра}: `{{
Выражение | фильтр }}`. Angular предоставляет набор фильтров для форматирования выводимых данных.

В примере выше, выражение внутри двойных фигурных скобок говорит Angular «привяжи данные которые мы
получаем из виджетов к этому месту, перемножь их, и отформатируй полученный результат так, чтобы он
был похож на деньги».

Обратите внимание, что мы достигли такого поведения, ни вызывая методы Angular, ни путем внедрения специализированного поведения фреймворка. Мы добились такого поведения, потому что браузер вел себя в соответствие с тем, что необходимо для динамического веб-приложения, а не с тем, что нужно для статических документов. Angular снизил сложность до того уровня, когда вызов библиотеки или фреймфорка не требуются.


# Дзен Angular

Angular создан с уверенностью в том что, декларативный код лучше императивного когда требуется создать UI и связать компоненты между собой; с другой стороны императивный код прекрасно подходит для выражения бизнес-логики.


  * Хорошая идея — разделить манипуляции с DOM и логику приложения. Это разделение позволяет упростить тестирование кода.
  * Очень, очень хорошо относиться к тестированию с такой же важностью как и к написанию приложения. Сложность тестирования  во многом зависит от структурированности кода. 
  * Прекрасная идея — отделить клиентскую часть приложения от серверной. Это позволяет вести разработку параллельно и повторно использовать обе части.
  * Очень полезно то, что фреймворк направляет разработчиков на всём протяжении построения приложения: начиная с дизайна UI, через написание бизнес-логики, к тестированию.
  * Всегда хорошо делать рутинные задачи тривиальными, а сложные — возможными.



Angular освобождает от рутины:

  * **Регистрация колбеков:** Регистрация функций обратного вызова захламляет код, не давая увидеть лес за деревьями. Удаление шаблонного кода (такого, как функции обратного вызова) - всегда хорошо. Это значительно уменьшает количество кода, которое надо написать, но и позволяет увидеть то, что делает приложение.
  * **Программное манипулирование DOM:** Манипулирование HTML DOM - краеугольный камень AJAX-приложений, но оно очень утомительно и ненадёжно. Декларативно описывая как должен меняться UI в зависимости от изменения состояния приложения, вы освобождаетесь от низкоуровневых манипуляций с DOM. Большинству приложений, написанных с помощью Angular, никогда не придется программно манипулировать DOM, хотя вы это можете это делать если захотите.
  * **Группировка данных из/в UI:** Большинство операций в AJAX приложениях составляют CRUD-операции. Поток данных от сервера к внутреннему объекту, а затем к HTML форме, позволяющий пользователям изменять форму, валидирующий форму и показывающий ошибки валидации, и, затем, возвращающийся во внутреннюю модель и затем на сервер, создает много шаблонного кода. Angular избавляется от большей части такого кода, оставляя код, описывающий общий поток данных в приложении, а не детали реализации. 
  * **Написание тонны кода только для того что бы что-то работало:** Обычно вам необходимо написать много дополнительного кода для того чтобы получить простое «Hello World» AJAX приложение. С помощью Angular можно быстро создать приложение используя сервисы, которые автоматически встраиваются в приложение в {@link http://code.google.com/p/google-guice/ Guice}-образном dependency-injection стиле. Это позволяет быстро приступить к разработке вашего приложения. В качестве бонуса вы получите полный контроль над инициализацией в автоматизированных тестах.


# Презентация Angular

Презентация Angular на английском языке в мае 2012 года. Слайды с презентации можно
посмотреть {@link http://mhevery.github.io/angular-demo-slides/index.html#/list здесь}.

<iframe width="560" height="315" src="http://www.youtube.com/embed/bfrn5VNpwsg" frameborder="0" allowfullscreen></iframe>
