@ngdoc overview
@name Developer Guide: Совместимость с IE
@description

# Обзор

Этот документ описывает особенности работы с пользовательскими атрибутами HTML и тегами в Internet Explorer (IE). Прочитайте, если планируете разрабатывать приложения на Angular для IE v8.0 или ранних версий.

# Упрощенный способ

Для того, чтобы Angular работал в IE, пожалуйста, убедитесь, что:

  1. Доступна библиотечная функция JSON.stringify (необходима для IE7). Можно использовать библиотеки [JSON2](https://github.com/douglascrockford/JSON-js) или [JSON3](http://bestiejs.github.com/json3/).
     <pre>
       <!doctype html>
       <html xmlns:ng="http://angularjs.org">
         <head>
           <!--[if lte IE 8]>
             <script src="/path/to/json2.js"></script>
           <![endif]-->
         </head>
         <body>
           ...
         </body>
       </html>
     </pre>

  2. Добавлен `id="ng-app"` в корневой элемент в сочетании с `ng-app` атрибутом
     <pre>
       <!doctype html>
       <html xmlns:ng="http://angularjs.org" id="ng-app" ng-app="optionalModuleName">
         ...
       </html>
     </pre>

  3. **не используются** пользовательские теги наподобие `<ng:view>` (вместо этого используйте атрибут вида `<div ng-view>`), или

  4. если **используются** пользовательские теги, то предпринято следующее, чтобы IE правильно их обработал:
     <pre>
       <!doctype html>
       <html xmlns:ng="http://angularjs.org" id="ng-app" ng-app="optionalModuleName">
         <head>
           <!--[if lte IE 8]>
             <script>
               document.createElement('ng-include');
               document.createElement('ng-pluralize');
               document.createElement('ng-view');
     
               // При необходимости их для CSS
               document.createElement('ng:include');
               document.createElement('ng:pluralize');
               document.createElement('ng:view');
             </script>
           <![endif]-->
         </head>
         <body>
           ...
         </body>
       </html>
     </pre>

**Важные** части:

  * `xmlns:ng` - *пространство имен* — для каждого пользовательского тега, который планируется использовать, необходимо отдельное пространство имен.

  * `document.createElement(yourTagName)` - *создание пользовательских имен тегов* — Так как это актуально только для старых версий IE нужно загрузить его условно. Для каждого тега, который не имеет имени и который не определен в HTML нужно предварительно объявить его, чтобы IE не ругался.


# Расширенный способ

IE испытывает проблемы с именами тегов, которые не являются стандартными в HTML. Эти проблемы делятся на две категории, и в каждой имеется свое собственное решение.

  * Если имя тега начинается с префикса `my:`, то оно считается пространством имен XML и необходимо иметь соответствующее объявление пространства имен `<html xmlns:my="ignored">`

  * Если тег не имеет `:` то он не является стандартным тегом HTML, поэтому должен быть предварительно создан с помощью `document.createElement('my-tag')`

  * Если планируется стилизация пользовательского тега CSS-селектором, то он должен быть предварительно объявлен с помощью `document.createElement('my-tag')` независимо от пространства имен XML.


## Хорошие новости

Хорошей новостью является то, что эти ограничения относятся только к именам тегов элемента, а не к именам атрибутов элемента. Так что специальная обработка в IE не требуется: `<div my-tag your:tag></div>`.


## Что произойдет, если будет допущена ошибка?

Предположим, есть HTML с неизвестным тегом `mytag` (с таким же результатом могут использоваться теги `my:tag` или `my-tag`):

<pre>
  <html>
    <body>
      <mytag>some text</mytag>
    </body>
  </html>
</pre>

Парсер преобразует это в следующий DOM:

<pre>
#document
  +- HTML
     +- BODY
        +- mytag
           +- #text: some text
</pre>

Ожидается, что элемент `BODY` имеет дочерний элемент `mytag`, который в свою очередь имеет `some text`.

Но IE сделает по-другому (если не использовались вышеуказанные решения):

<pre>
#document
  +- HTML
     +- BODY
        +- mytag
        +- #text: some text
        +- /mytag
</pre>

IE решит, что элемент `BODY` имеет троих потомков:

  1. Одиночный закрытый `mytag`. Пример одиночного закрытого тега `<br/>`. Завершающий слэш `/` не является обязательным, но тег `<br>` не может иметь потомков, и браузер, увидев `<br>some text</br>`, не определит его как `<br>` с текстом внутри.

  2. Текстовый узел с `some text`, который должен быть потомком `mytag`, а не элементом одного с ним уровня.

  3. Неправильно закрытый тег `/mytag`. Это недопустимо в именах элементов, которые не могут иметь слэш `/`. Кроме этого закрывающий элемент не должен быть частью DOM, так как он используется только чтобы очертить структуру DOM.


## CSS-стилизация пользовательских тегов

Чтобы создать рабочие CSS-селекторы для пользовательских элементов, имя пользовательского элемента должно быть предварительно объявлено с помощью `document.createElement('my-tag')` независимо от пространства имен XML.

<pre>
  <html xmlns:ng="needed for ng: namespace">
    <head>
      <!--[if lte IE 8]>
        <script>
          // необходимо для корректного парсинга ng-include
          document.createElement('ng-include');

          // необходимо для включения CSS ссылок
          document.createElement('ng:view');
        </script>
      <![endif]-->
      <style>
        ng\\:view {
          display: block;
          border: 1px solid red;
        }

        ng-include {
          display: block;
          border: 1px solid blue;
        }
      </style>
    </head>
    <body>
      <ng:view></ng:view>
      <ng-include></ng-include>
      ...
    </body>
  </html>
</pre>



