@ngdoc overview
@name Developer Guide: Локализация (i18n/l10n)
@description

# Локализация и интернационализация в AngularJS

**Что такое локализация и интернационализация?**

Интернационализация, сокращенно i18n, это процесс разработки продуктов таким образом, что они могут быть легко 
локализованы для разных языков и культур. Локализация, сокращенно l10n, это процесс адаптации приложений и текста 
для возможности их применения в определенной культурной или языковой среде. Для разработчиков интернационализация 
подразумевает вынесение всех строк и других языковых конструкций (например, дат или форматов валют) из приложения. 
Локализация означает предоставление переводов и локализованных языковых конструкций.

**На каком уровне в настоящее время поддерживается i18n/l10n в Angular?**

В настоящее время Angular поддерживает i18n/l10n для {@link api/ng.filter:date даты и времени}, 
{@link api/ng.filter:number числительных} и {@link api/ng.filter:currency валютных} фильтров.

Кроме того, Angular поддерживает локализацию, которую обеспечивает директива {@link
api/ng.directive:ngPluralize ngPluralize}.

Все локализуемые компоненты Angular зависят от языковых правил, предоставляемых сервисом 
{@link api/ng.$locale $locale}.

Для тех, кто хочет взглянуть на примеры, у нас есть несколько веб-страниц, которые наглядно демонстрируют, как 
использовать фильтры Angular с различными наборами языковых правил. Примеры лежат на Github в папке 
{@link https://github.com/angular/angular.js/tree/master/i18n/e2e i18n/e2e} в пакете разработчика Angular.

**Что такое локальный id?**

Локаль представляет конкретный географический, политический или культурный регион. Наиболее часто используемый код 
языка состоит из двух частей: непосредственно кода языка и кода страны. Например, en-US, en-AU, zh-CN являются 
допустимыми кодами языка, которые состоят из когда самого языка и кода страны. Указание кода страны в коде языка не 
является обязательным, идентификаторы региональных настроек, такие как en, zh, and sk также корректны. См. 
{@link http://userguide.icu-project.org/locale сайт ICU } для получения дополнительной информации об использовании 
идентификаторов региональных настроек.

**Поддерживаемые языки в Angular**
Angular знает правила форматов чисел и дат, установленные в разных файлах, каждый файл для конкретной местности. 
Вы можете найти список поддерживаемых локалей {@link
https://github.com/angular/angular.js/tree/master/src/ngLocale здесь}

# Поддержка региональных настроек в Angular

В Angular существуют два подхода к поддержке языковых особенностей:

**1. Предустановленные правила**

Можно предустановить требуемую национальную версию файла в Angular, приписав код языка в конец `angular.js` или 
`angular.min.js` файла.

Например, чтобы в *nix, создать angular.js файл, содержащий правила локализации для немецкого языка, нужно сделать 
следующее:

`cat angular.js i18n/angular-locale_de-ge.js > angular_de-ge.js`

Когда приложение, содержащее сценарий `angular_de-ge.js` вместо универсального сценария angular.js запустится, 
Angular автоматически предустановит правила локализации для немецкого языка.

**2. Подключить js-скрипт с локалью к странице index.html**

Можно также подключить js-файл с локалью к странице index.html. Например, если один клиент требует немецкий язык, 
вы передаете index_de-ge.html который будет выглядеть примерно так:

<pre>
<html ng-app>
 <head>
….
   <script src="angular.js"></script>
   <script src="i18n/angular-locale_de-ge.js"></script>
….
 </head>
</html>
</pre>

**Сравнение двух подходов.**
Оба описанных выше подхода требуют, чтобы вы подготовили различные страницы index.html или js-файлы для каждого 
региона, чтобы локализовать приложение. Кроме того, необходимо настроить сервер для отдачи правильного файла, 
который соответствует требуемой национальной версии.

Тем не менее, второй подход (подключение js-скрипта к странице index.html), вероятно, будет медленнее, так как 
необходимо загрузить дополнительный сценарий.


# Коварные особенности

**Символ валюты**

{@link api/ng.filter:currency Фильтр валют} в Angular позволяет использовать символ валюты по умолчанию из службы 
локали или можно указать фильтру специальный символ валюты. Если приложение будет использоваться только в одном 
регионе, то можно положиться на символ валюты по умолчанию. Однако, если вы ожидаете, что пользователи в других 
местах будут использовать ваше приложение, вы должны предоставить свой собственный символ валюты, чтобы убедиться, 
что её значение понимается правильно.

Например, если нужно показать остаток на счете 1000 долларов то следует настроить фильтр следующим образом: 
`{{1000 | currency}}`, и в приложении будет установлена en-US локаль. Будет показано «$ 1000,00». Однако, 
если кто-то воспользуется этим приложением из другого места (например, из Японии), то браузер установит язык в ja, 
и баланс вместо этого станет «¥ 1000.00». Это расстроит ваших клиентов.

В этом случае, вам необходимо изменить символ валюты по умолчанию, задав в 
{@link api/ng.filter:currency фильтре валют} символом валюты в качестве параметра при настройке фильтра, например, 
{{ 1000 | currency:"USD$"}}. Таким образом, Angular всегда будет показывать баланс «USD$1000» независимо от языковой 
версии.

**Длина строки**

Имейте в виду, что переведенные строковые/датавременные форматы могут сильно различаться по длине. Например, 
`June 3, 1977` будет переведено на испанский как `3 de junio de 1977`. Найдутся и другие более крайние случаи. 
Поэтому, когда интернационализуется приложение, вам необходимо соответственно применить правила CSS и провести 
тщательное тестирование, чтобы убедиться что компоненты пользовательского интерфейса не перекрываются.


**Временные зоны**

Имейте в виду, что фильтр даты и времени в Angular использует часовой пояс из настроек браузера. Так же приложение 
отображает различную информацию времени в зависимости от часового пояса из настроек компьютера, на котором запущено 
приложение. Ни Javascript, ни Angular в настоящее время не поддерживают отображение даты и часового пояса, 
определяемого разработчиком.
