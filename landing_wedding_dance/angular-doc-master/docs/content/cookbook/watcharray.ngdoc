@ngdoc overview
@name Cookbook: Обработка списков
@description

Отслеживание изменений всего массива и определение изменившегося элемента. А так же использование 
наследования областей видимости в контроллере.

#С использованием $watch

<example module="app1">
  <file name="index.html">
    <div ng-controller="UserListCtrl1">
      <ul>
        <li ng-repeat="user in users" ng-controller="UserItemCtrl" ng-model="users">
          <input ng-model="user.name"/>
        </li>
      </ul>
      <div>
        Последнее изменение: № {{last.index}} {{last.name}}
      </div>
    </div>
  </file>
  <file name="script.js">
    angular.module('app1', []);
    
    function UserListCtrl1($scope) {
      $scope.users = [{name: 'Oleg', age: 27},
                      {name: 'Diana', age: 25},
                      {name: 'Bob', age: 30}];
      $scope.last = {name: 'нет',
                     index: '-'};
    }
    
    function UserItemCtrl($scope) {
      $scope.$watch('users[$index]', function(newValue, oldValue, scope) {
        if (newValue === oldValue) return;
        
        $scope.last.index = scope.$index;
        $scope.last.name = scope.users[scope.$index].name;
        
        //Мы используем параметр 'name' из объекта 'last', чтобы Angular, не найдя 'last'
        //в текущей области видимости стал бы искать в родительской (где объявлен объект 
        //'last'). Если бы мы задавали 'name' напрямую ($scope.name = 'нет'), то Angular 
        //просто создал бы такой параметр в дочерней области видимости, перекрыв им значение 
        //из родительской области.
        
      }, true);
    }
  </file>
</example>

#С использованием колбека
В большинстве случаев этот способ предпочтительнее, т.к. более декларативен, заставляет помнить об обработчике события,
в то время как про $watch можно забыть.

<example module="app2">
  <file name="index.html">
    <div ng-controller="UserListCtrl2">
      <ul>
        <li ng-repeat="user in users" ng-model="users">
          <input ng-change="change($index, user)" ng-model="user.name"/>
        </li>
      </ul>
      <div>
        Последнее изменение: № {{lastindex}} {{lastname}}
      </div>
    </div>
  </file>
  <file name="script.js">
    angular.module('app2', []);
    
    function UserListCtrl2($scope) {
      $scope.users = [{name: 'Oleg', age: 27},
                      {name: 'Diana', age: 25},
                      {name: 'Bob', age: 30}];
      $scope.lastname = 'нет';
      $scope.lastindex = '-';
      $scope.change = function (index, user) {
        $scope.lastindex = index;
        $scope.lastname = user.name;
      };
    }
  </file>
</example>
