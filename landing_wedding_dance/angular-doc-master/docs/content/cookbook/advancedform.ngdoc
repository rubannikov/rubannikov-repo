@ngdoc overview
@name Cookbook: Расширенная форма
@description

Здесь мы расширяем пример базовой формы, включая стандартные особенности, такие как возврат назад, 
обнаружение какого-либо ввода и предотвращение отправки некорректно заполненной формы.

<doc:example>
<doc:source>
   <script>
   function UserForm($scope) {
     var master = {
       name: 'John Smith',
       address:{
         line1: '123 Main St.',
         city:'Anytown',
         state:'AA',
         zip:'12345'
       },
       contacts:[
         {type:'телефон', value:'1(234) 555-1212'}
       ]
     };

     $scope.state = /^\w\w$/;
     $scope.zip = /^\d\d\d\d\d$/;

     $scope.cancel = function() {
       $scope.form = angular.copy(master);
     };

     $scope.save = function() {
       master = $scope.form;
       $scope.cancel();
     };

     $scope.addContact = function() {
       $scope.form.contacts.push({type:'', value:''});
     };

     $scope.removeContact = function(contact) {
       var contacts = $scope.form.contacts;
       for (var i = 0, ii = contacts.length; i < ii; i++) {
         if (contact === contacts[i]) {
           contacts.splice(i, 1);
         }
       }
     };

     $scope.isCancelDisabled = function() {
       return angular.equals(master, $scope.form);
     };

     $scope.isSaveDisabled = function() {
       return $scope.myForm.$invalid || angular.equals(master, $scope.form);
     };

     $scope.cancel();
   }
   </script>
   <div ng-controller="UserForm">

     <form name="myForm">

       <label>Имя:</label><br/>
       <input type="text" ng-model="form.name" required/> <br/><br/>

       <label>Адрес:</label> <br/>
       <input type="text" ng-model="form.address.line1" size="33" required/> <br/>
       <input type="text" ng-model="form.address.city" size="12" required/>,
       <input type="text" ng-model="form.address.state" size="2"
              ng-pattern="state" required/>
       <input type="text" ng-model="form.address.zip" size="5"
              ng-pattern="zip" required/><br/><br/>

       <label>Контакты:</label>
       [ <a href="" ng-click="addContact()">добавить</a> ]
       <div ng-repeat="contact in form.contacts">
         <select ng-model="contact.type">
           <option>эл. почта</option>
           <option>телефон</option>
           <option>пейджер</option>
           <option>IM</option>
         </select>
         <input type="text" ng-model="contact.value" required/>
           [ <a href="" ng-click="removeContact(contact)">×</a> ]
       </div>
     <button ng-click="cancel()" ng-disabled="isCancelDisabled()">Отмена</button>
     <button ng-click="save()" ng-disabled="isSaveDisabled()">Сохранить</button>
   </form>

   <hr/>
   Отладчик:
   <pre>form={{form}}</pre>
   </div>
</doc:source>
<doc:scenario>
  it('should enable save button', function() {
    expect(element(':button:contains(Сохранить)').attr('disabled')).toBeTruthy();
    input('form.name').enter('');
    expect(element(':button:contains(Сохранить)').attr('disabled')).toBeTruthy();
    input('form.name').enter('change');
    expect(element(':button:contains(Сохранить)').attr('disabled')).toBeFalsy();
    element(':button:contains(Сохранить)').click();
    expect(element(':button:contains(Сохранить)').attr('disabled')).toBeTruthy();
  });
  it('should enable cancel button', function() {
    expect(element(':button:contains(Отмена)').attr('disabled')).toBeTruthy();
    input('form.name').enter('change');
    expect(element(':button:contains(Отмена)').attr('disabled')).toBeFalsy();
    element(':button:contains(Отмена)').click();
    expect(element(':button:contains(Отмена)').attr('disabled')).toBeTruthy();
    expect(element(':input[ng\\:model="form.name"]').val()).toEqual('John Smith');
  });
</doc:scenario>
</doc:example>


#На что следует обратить внимание

* Кнопки «Отмена» и «Сохранить» доступны только если в форму что-нибудь вводилось — должно быть то,
что можно отменять или сохранять.
* Кнопка сохранения доступна если проверка не выявила ошибок в форме.
* «Отмена» откатывает все изменения к первоначальному состоянию формы.
* Сохранение изменений во внутренней модели формы.
* Отладка показывает две модели. Одна для пользователей формы, а другая в качестве эталонной копии.
