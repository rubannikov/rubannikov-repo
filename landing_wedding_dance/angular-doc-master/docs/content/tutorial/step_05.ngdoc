@ngdoc overview
@name Tutorial: 5 - XHRs & Dependency Injection
@description

<ul doc-tutorial-nav="5"></ul>

Хватит строить приложение с жестко заданным набором данных! Давайте загрузим больший набор данных с сервера 
используя встроенный в Angular {@link api/ng сервис} {@link api/ng.$http $http}. Для работы этого сервиса 
в контроллере 'PhoneListCtrl' мы будем использовать  {@link guide/di внедрение зависимостей} (DI - dependency injection).

<div class="tabbable" show="true">

  <div class="tab-pane well" id="git-mac" title="Git на Mac/Linux" value="gitUnix">
    <ol>
      <li>
        <p>Откатите ваш рабочий код до шага 5.</p>
        <pre>git checkout -f step-5</pre>
      </li>
      <li>
        <p>Перезагрузите страницу или проверьте приложение на 
           <a href="http://angular.github.com/angular-phonecat/step-5/app">сервере Angular</a>.
        </p>
      </li>
    </ol>
  </div>

  <div class="tab-pane well" title="Git на Windows" value="gitWin">
    <ol>
      <li>
        <p>Откатите ваш рабочий код до шага 5.</p>
        <pre>git checkout -f step-5</pre>
      </li>
      <li>
        <p>Перезагрузите страницу или проверьте приложение на 
           <a href="http://angular.github.com/angular-phonecat/step-5/app">сервере Angular</a>
        </p>
      </li>
    </ol>
  </div>

</div>

Теперь вам должен быть виден список из 20 телефонов.

Наиболее важные изменения указаны ниже. Полные изменения можно просмотреть на {@link
https://github.com/angular/angular-phonecat/compare/step-4...step-5 GitHub}.


## Данные

Файл  `app/phones/phones.json` – это набор данных, представленный в JSON-формате.

Часть данных из файла:
<pre>
[
 {
  "age": 13,
  "id": "motorola-defy-with-motoblur",
  "name": "Motorola DEFY\u2122 with MOTOBLUR\u2122",
  "snippet": "Are you ready for everything life throws your way?"
  ...
 },
...
]
</pre>


## Контроллер

Мы загрузим app/phones/phones.json файл с помощью http-запроса к серверу и используем для этого встроенный сервис 
{@link api/ng.$http $http}. $http - это лишь один из нескольких встроенных {@link api/ng angular сервисов}, 
которые обрабатывают наиболее распространенные операции в web-приложениях.

Сервисы внедряются с помощью {@link guide/di системы внедрения зависимостей}. Внедрение зависимости призвано помочь
строить как строго структурированные веб-приложения (с распределёнными компонентами для отображения, данных и управления),
так и слабоструктурированные (зависимости между компонентами не обрабатываются самими компонентами, эту функцию
выполняет система внедрения зависимостей).


__`app/js/controllers.js:`__
<pre>
var phonecatApp = angular.module('phonecatApp', []);
 
phonecatApp.controller('PhoneListCtrl', function ($scope, $http) {
  $http.get('phones/phones.json').success(function(data) {
    $scope.phones = data;
  });
 
  $scope.orderProp = 'age';
});
</pre>

`$http` делает HTTP GET запрос к нашему веб серверу, который обращается к `phone/phones.json` (ссылка относительна
к `index.html`). Сервер отвечает возвращая данные в json-файле. (Запрос может быть отослан не только к 
json-файлу, как сделано в этом учебнике, но и может быть динамически сгенерирован на сервере (при помощи php, например).
Для приложения и браузера это будет равносильно. Такой формат был взят для упрощения примера.)

Сервис `$http` возвращает {@link api/ng.$q обещание}(promise) с методом `success`. Мы обращаемся к этому методу для обработки
ответа асинхронного запроса и присваиваем данные к нашей области видимости в качестве модели `phones`,
которая контролируется этим контроллером. Стоит отметить, что Angular обнаруживает ответ в формате json и парсит его для нас.

Для использования сервисов в Angular, необходимо объявить имена зависимостей, которые необходимы, в качестве аргументов
для функции конструктора контроллера, например:
<pre>
     phonecatApp.controller('PhoneListCtrl', function ($scope, $http) {...}
</pre>     
Система внедрения зависимостей Angular подключает сервисы к контроллеру в момент его создания. Внедрение зависимостей
так же отвечает за создание переходных (временных) зависимостей, которые могут содержаться в сервисе
(сервисы часто зависят от других сервисов).

Обратите особое внимание на имена переменных - инжектор использует их для поиска зависимостей. 

<img  class="diagram" src="img/tutorial/xhr_service_final.png">


### Префикс '$' в именах

Можно создать собственные сервисы, и на самом деле мы будем делать это в {@link step_11 шаге 11}. В соглашении об
именовании сервисов Angular, методов областей видимости и другого API выделяется префикс '$' в начале имени.
Не используйте этот префикс для именования собственных сервисов и моделей чтобы избежать возможного конфликта имен.
Вы можете так же найти некоторые свойства которые начинаются с '$$'. Эти свойства являются приватными и не должны быть 
доступны как для чтения так и для изменения.

### Заметка о минификации

Так как Angular строит зависимости контроллера исходя из имен аргументов переданных в конструкторе контроллера, то если
вы {@link http://en.wikipedia.org/wiki/Minification_(programming) минифицируете} javascript-код контроллера
`PhoneListCtrl`, -  все аргументы тоже будут минифицированы и инжектор зависимостей не сможет идентифицировать сервисы верно.

Существует 2 способа решения проблем, связанных с минификацией:

* Запишите зависимости в свойство `$inject` как массив строк, после чего укажите функцию-контроллер. Каждая строка в массиве это имя сервиса. В нашем случае это выглядит так:

<pre>
    function PhoneListCtrl($scope, $http) {...}
    PhoneListCtrl.$inject = ['$scope', '$http'];
    phonecatApp.controller('PhoneListCtrl', PhoneListCtrl);
</pre>

* Используйте скобки, которыми оборачивается функция, в которых будет задан массив строк (представляющих
имена зависимостей) после описания функции для внедрения:

<pre>
    function PhoneListCtrl($scope, $http) {...}
    phonecatApp.controller('PhoneListCtrl', ['$scope', '$http', PhoneListCtrl]);
</pre>

Оба этих метода работают с любой функцией, которая может быть внедрена в Angular, так что решайте сами,
какой стиль использовать.


При использовании второго метода можно использовать анонимную функцию при регистрации контроллера:

    phonecatApp.controller('PhoneListCtrl', ['$scope', '$http', function($scope, $http) {...}]);
    
Далее мы также будем пользоваться этим вариантом записи. Теперь контроллер будут выглядеть так:

__`app/js/controllers.js:`__

<pre>
var phonecatApp = angular.module('phonecatApp', []);
 
phonecatApp.controller('PhoneListCtrl', ['$scope', '$http',
  function ($scope, $http) {
    $http.get('phones/phones.json').success(function(data) {
      $scope.phones = data;
    });
 
    $scope.orderProp = 'age';
  }]);
</pre>

## Тестирование

__`test/unit/controllersSpec.js`:__

Так как мы начали использовать инъекцию завимимостией и у нашего контроллера есть зависимости, создание
контроллера в наших тестах будет более сложным. Мы могли бы использовать оператор `new` и предоставить
констркутор с какой-нибудь фейковой реализацией `$http`. Однако рекомендованным (и более простым) способом
является создание контроллера в тестовой среде таким же способом, как angular делает это в production
среде за кулисами, вот примерно так:

<pre>
describe('PhoneCat controllers', function() {

  describe('PhoneListCtrl', function(){
    var scope, ctrl, $httpBackend;

    // Загрузить модуль приложения перед каждым тестом
    beforeEach(module('phonecatApp'));

    // Здесь инжектор игнорирует подстрочные знаки вначале и в конце названий (напр., _$httpBackend).
    // Это позволяет нам внедрить сервис и присвоить его переменной 
    // с таким же названием как и у сервиса.
    beforeEach(inject(function(_$httpBackend_, $rootScope, $controller) {
      $httpBackend = _$httpBackend_;
      $httpBackend.expectGET('phones/phones.json').
          respond([{name: 'Nexus S'}, {name: 'Motorola DROID'}]);

      scope = $rootScope.$new();
      ctrl = $controller(PhoneListCtrl, {$scope: scope});
    }));
</pre>

Внимание: Так как мы загружаем Jasmine и `angular-mocks.js` в нашем тестовом окружении, мы получили
2 хелпер-метода {@link api/angular.mock.module module} и {@link api/angular.mock.inject inject},
которые будем использовать для конфигурации инжектора и доступа к нему.

Мы создали контроллер в тестовой среде таким способом:

*  Мы использовали хелпер `inject` для внедрение экземпляров 
{@link api/ng.$rootScope $rootScope},
{@link api/ng.$controller $controller} и
{@link api/ng.$httpBackend $httpBackend} 
сервисов в функцию `beforeEach` Jasmine.
Эти экземпляры от инжектора, который пересоздается с нуля для каждого теста.
Это гарантирует, что каждый тест начинается с хорошо известной точки и каждый тест изолирован
от результата работы других тестов.

* Мы создали новый scope для нашего контроллера вызовом `$rootScope.$new()`

* Мы вызвали инжектированную функцию `$controller` и передали в нее `PhoneListCtrl` функцию и созданный scope 
  в качестве параметров.

В коде нашего контроллера используется `$http` сервис для получения списка телефонов, поэтому, до создания дочернего
scope для `PhoneListCtrl`, нам нужно сообщить тестирующей среде, что нужно ожидать входящий запрос из котроллера.
Для этого мы делаем:

* `$httpBackend` сервис, который инжектирован в нашей `beforeEach` функции. Это макетная/фейковая (mock) версия сервиса,
  который в production среде обеспечивает все XHR и JSONP запросы. Макетная (mock) версия этого сервиса 
  позволяет нам писать тесты без необходимости иметь дело с нативным (native) API и глобальным состоянием, 
  которое ассоциировано с ним - все то, что делает тестирование кошмаром.

* используем `$httpBackend.expectGET` метод у `$httpBackend` сервиса, который ожидает входящий HTTP запрос и
  говорим ему, какой ответ (respond) нужно вернуть. Обратите внимание, что ответы (responses) не будут возвращены
  до тех пор, пока мы не вызовем метод `$httpBackend.flush`.

Теперь сделаем пару тестов, чтобы убедиться, что модель `phones` не существует в `scope` до получения ответ:

<pre>
    it('should create "phones" model with 2 phones fetched from xhr', function() {
      expect(scope.phones).toBeUndefined();
      $httpBackend.flush();

      expect(scope.phones).toEqual([{name: 'Nexus S'},
                                   {name: 'Motorola DROID'}]);
    });
</pre>

* Мы освободили (flush) очередь запросов в браузере при вызове `$httpBackend.flush()`. Это приводит к тому, что
  обещание (promise) `$http` сервиса возвращает определенный нами ранее (в `$httpBackend.expectGET`) ответ (response).

* Мы делаем утверждения (assertions) и проверку (verifying), что модель `phones` сейчас сущестует в scope.

Наконец, мы проверяем, что значение по умолчанию для `orderProp` выставляется верно:

<pre>
    it('should set the default value of orderProp model', function() {
      expect(scope.orderProp).toBe('age');
    });
  });
});
</pre>

Теперь вы должны видеть следующий вывод на вкладке Karma:

       Chrome 22.0: Executed 2 of 2 SUCCESS (0.028 secs / 0.007 secs)



# Попробуем самостоятельно

* В конце файла `index.html` добавьте `{{phones | json}}`, чтобы увидеть список телефонов в формате json.

* В контроллере "PhoneListCtrl" обработайте http ответ на запрос, ограничив кол-во выводимых телефонов 5-ю. Добавьте следующий код в функцию обратного вызова $http:

         $scope.phones = data.splice(0, 5);

# Итоги

Теперь после того как Вы научились легко использовать сервисы Angular (спасибо dependency injection) переходим к 
{@link step_06 шагу 6}, где мы добавим превьюшки телефонов и ссылки на них. 


<ul doc-tutorial-nav="5"></ul>
